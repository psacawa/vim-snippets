priority -50
extends javascript-jsdoc

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

snippet from "import from module" b
import { ${2:object} } from '${1:module}';
endsnippet

snippet fromd "import default from module" b
import ${2:object} from '${1:module}';
endsnippet

snippet imp "import from module" b
import { ${1:object} } from '${2:module}';
endsnippet

snippet impd "import default from module" b
import ${1:object} from '${2:module}';
endsnippet

# wyraz. reg. obcina przedrostki: ../ ./ \w+/ oraz przyrostek \.\w+
snippet imps "import * from module" b
import * as ${1/^(?:(?:\.\.|\.|\w+)\/)*(?P<base>\w+)(?:\.\w+)?$/$1/} from '${1:module}';
endsnippet

snippet forin "for prop in obj" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	${3:${VISUAL:content}}$0
}
endsnippet



snippet forof "for prop of obj" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} of ${2:obj}){
	${3:${VISUAL:content}}$0
}
endsnippet

snippet "class" "class with constructor" br
class ${1:Class}${2/^\w+$/ extends /}${2:Base} {
	constructor (${3:args}) {
		${4:${VISUAL:super()}}$0
	}
}
endsnippet


###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# snippet get "Get Elements"
# getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
# endsnippet

# snippet '':f "object method string"
# '${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
#   ${VISUAL:body}$0
# }${10:,}
# endsnippet

snippet cfun "Arrow Class Method" b
${1:method_name} `!p snip.rv = space_before_function_paren(snip)`(${2:args}) {
	${3:${VISUAL:body}}$0
}
endsnippet

# snippet :f "Object Method"
# ${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
#   ${VISUAL:body}$0
# }${10:,}
# endsnippet

# snippet :, "Object Value JS"
# ${1:value_name}: ${0:value},
# endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL:body}$0
}`!p snip.rv = semi(snip)`

endsnippet

snippet fun "function (named)" 
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${3:${VISUAL:body}}$0
}
endsnippet

snippet afun "async function"
async function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${3:${VISUAL:body}}$0
}
endsnippet

snippet gen "generator (named)" 
function* ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${3:${VISUAL:body}}$0
}
endsnippet

snippet ar "arrow function" w
(${1:argument}) => {
	${2:${VISUAL:body}}$0
}
endsnippet

snippet arf "arrow function" w
(${1:argument}) => (
	${2:${VISUAL:body}}$0
)
endsnippet

snippet ard "arrow function"
const ${1:function_name} = (${2:argument}) => {
	${3:${VISUAL:body}}$0
}
endsnippet

snippet aar "async arrow function" w
(${1:argument}) => {
	${2:${VISUAL:body}}$0
}
endsnippet

snippet aard "async arrow function"
const ${1:function_name} = (${2:argument}) => {
	${3:${VISUAL:body}}$0
}
endsnippet

# snippet vf "function (assigned to var)"
# ${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
#   ${VISUAL:body}$0
# }`!p snip.rv = semi(snip)`
# endsnippet

# Drop priority so this only triggers when not beginning of line.

priority -51

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	${VISUAL:body}$0
}(${2:$1}))`!p snip.rv = semi(snip)`
endsnippet

snippet sT "setTimeout function"
setTimeout(() => {
	${0:${VISUAL:body}}
}, ${1:1000})
endsnippet

# snippet fi "for prop in obj using hasOwnProperty" b
# for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
#   if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
#     ${VISUAL:body}$0
#   }
# }
# endsnippet

snippet "wh(ile)?" "while loop" br
while (${1:condition}) {
	${2:${VISUAL:body}}
}
endsnippet


snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${2:${VISUAL:body}}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${2:${VISUAL:if_body}}
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${3:else_body}$0
}
endsnippet

snippet ifee "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${2:${VISUAL:if_body}}
else if`!p snip.rv = keyword_spacing(snip)`(${3:true}) {
	${4:elseif_body}
} else {
	${5:else_body}$0
}
endsnippet

snippet switch
switch (${1:condition}) {
	case ${2:value}:
		${3:${VISUAL:body}}
		break;
	default:
		${2:default_body}
		break;
}
endsnippet

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'${VISUAL:body}${1:case}':
	${VISUAL:body}$0
	break`!p snip.rv = semi(snip)`
endsnippet

snippet try "try/catch block" b
try {
	${1:${VISUAL:body}}
} catch (${2:error}) {
	${3:exception_logic}
}
endsnippet

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	${VISUAL:body}$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet cl "console.log(...)" 
console.log (${1:${VISUAL:"hello world"}})
endsnippet

snippet ce "console.error(...)" 
console.error (${1:"hello world"})
endsnippet

##### NODE

snippet req "require cjs module" 
const \{ ${1:import} \} = require('${2:module}')
endsnippet

snippet reqn "require node module" 
const ${1:module} = require('$1')
endsnippet

snippet it "jest it block" 
it(${1:"description"}, () => {
	${VISUAL:content}$0
});
endsnippet

snippet ait "jest async it block" 
it(${1:"description"}, async () => {
	${VISUAL:content}$0
});
endsnippet

snippet desc "jest describe block" 
describe(${1:"description"}, () => {
	${VISUAL:content}$0
});
endsnippet

snippet bE "jest beforeEach block" 
beforeEach(() => {
	${VISUAL:content}$0
});
endsnippet
