#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet fn "pub fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pr "print!(..)" w
print!("$1"${2/.+/, /}$2);
endsnippet

snippet pln "println!(..)" w
println!("$1"${2/.+/, /}$2);
endsnippet

snippet fmt "format!(..)"
format!("$1"${2/.+/, /}$2);
endsnippet

snippet .it ".iter()" i
.iter()$0
endsnippet

snippet for "pętla for" b
for ${1:item} in ${2:collection} {
	${3:${VISUAL:body}}$0
}
endsnippet


snippet wh "pętla while" b
while ${1:condition} {
	${2:${VISUAL:body}}$0
}
endsnippet


snippet if "wyrażenie if" w
if ${1:condition} { 
	${2:${VISUAL:body}}$0
}
endsnippet

snippet ife "wyrażenie if/else" w
if ${1:condition} { 
	${2:${VISUAL:if_block}}
} else {
	${3:else_block}$0
}
endsnippet

snippet derive "makro proceduralny derive" b
#[derive(${1:Trait})]
endsnippet

snippet allow "makro proceduralny allow" b
#[allow(${1:dead_code})]
endsnippet

# vim:ft=snippets:
